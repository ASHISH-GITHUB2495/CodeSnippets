a = 1:10:1
a = 1:1:10
a
b = 1:0.1:10
b
b = 1:0.1:100
b
list(a,b)
model1<-lm(Y1~X1)
summary(model1)$r.squared
model2<-step(model1)
model2
c = list(a,b)
c[1]
c[2]
c(2)
c(1)
c(100)
X1 = mvrnorm(p, mu, sigma)
beta = c(3, 1.5 ,0, 0, 2, 0, 0, 0)
epsilon = mvrnorm(1, mu, 9*sigma)
X1 = t(X1)
Y1 = X1 %*% beta + epsilon
list(mse_step, test) = step_func(X1, Y1)
[mse_step, test] = step_func(X1, Y1)
list[mse_step, test] = step_func(X1, Y1)
list[mse_step, mse_pcr] = step_func(X1, Y1)
list[mse_step, mse_pcr[1]] = step_func(X1, Y1)
output = step_func(X1, Y1)
step_func <- function(X, Y, theta) {
model1<-lm(Y~X)
summary(model1)$r.squared
model2<-step(model1)
theta_hat = (model2$coefficients - theta)^2
y_hat = model2$fitted.values
return(list(y_hat, theta_hat))
}
output = step_func(X1, Y1)
output = step_func(X1, Y1, beta)
library(dprep)
source('~/Dropbox/CodeSnippets/R/ridge2.r')
debugSource('~/Downloads/Final Project.R')
var(MSE_COEF)
mean(MSE_COEF)
debugSource('~/Downloads/Final Project.R')
var(MSE_COEF)
mean(MSE_COEF)
debugSource('~/Downloads/Final Project.R')
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
debugSource('~/Downloads/Final Project.R')
debugSource('~/Downloads/Final Project.R')
debugSource('~/Downloads/Final Project.R')
debugSource('~/Dropbox/CodeSnippets/R/regression-project.r')
debugSource('~/Dropbox/CodeSnippets/R/regression-project.r')
mean(mse_step), mean(mse_step_beta)
mean(mse_step) mean(mse_step_beta)
mean(mse_step)
mean(mse_step_beta)
mean(mse_step)
mean(mse_step_beta)
var(mse_step_beta)
var(mse_step_beta)
var(mse_step)
var(mse_step_beta)
mean(mse_pcr)
mean(mse_pcr_beta)
var(mse_pcr)
var(mse_pcr_beta)
mean(mse_rr)
mean(mse_rr_beta)
var(mse_rr)
var(mse_rr_beta)
var(mse_lasso)
var(mse_lasso_beta)
mean(mse_lasso)
mean(mse_lasso_beta)
var(mse_step)
var(mse_step_beta)
mean(mse_step)
mean(mse_step_beta)
debugSource('~/Dropbox/CodeSnippets/R/regression-project.r')
var(mse_pcr)
var(mse_pcr_beta)
mean(mse_pcr)
mean(mse_pcr_beta)
var(mse_step)
var(mse_step_beta)
mean(mse_lasso)
mean(mse_lasso_beta)
var(mse_lasso)
var(mse_lasso_beta)
var(mse_pcr)
var(mse_pcr_beta)
mean(mse_pcr)
mean(mse_pcr_beta)
mean(mse_rr)
mean(mse_rr_beta)
var(mse_rr)
var(mse_rr_beta)
var(mse_rr/100)
var(mse_rr_beta/100)
var(mse_lasso/100)
var(mse_lasso_beta/100)
var(mse_lasso)
var(mse_lasso_beta)
mean(mse_lasso)
mean(mse_lasso_beta)
debugSource('~/Dropbox/CodeSnippets/R/regression-project.r')
debugSource('~/Dropbox/CodeSnippets/R/regression-project.r')
mean(mse_lasso)
mean(mse_lasso_beta)
mean(mse_lasso)
mean(mse_lasso_beta)
var(mse_lasso)
var(mse_lasso_beta)
debugSource('~/Downloads/Final Project.R')
var(MSE_COEF)
mean(MSE_COEF)
debugSource('~/Downloads/Final Project.R')
fitted.vals
debugSource('~/Downloads/Final Project.R')
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_COEF)
mean(MSE_COEF)
MSE_FITT
View(X)
for(i in 1:100)
{
#Generate data
#Generate data part changes a little
n=100
p=100
X<-matrix(rnorm(p*n),ncol=p)
beta<-rep(NA,p)
beta[1:8]<-c(3,1.5,0,0,2,0,0,0)
for(j in 9:p)
{
beta[j]<-rnorm(1)
}
epsilon<-matrix(rnorm(100,0,3),ncol=1)
y<-X%*%beta+epsilon
pc<-prcomp(X)
eig.val<-(pc$sdev)^2
prop<-cumsum(eig.val/sum(eig.val))
ncomp<-which(prop>=0.9)[1]
mod2<-pcr(y~X,ncomp)
MSE_FITT[i]<-sum((fitted(mod2)[,1,1]-y)^2)/n
MSE_COEF[i]<-sum((coef(mod2)[,1,1]-beta)^2)
}
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
MSE_COEF<-rep(NA,100)
MSE_FITT<-rep(NA,100)
for(i in 1:100)
{
#Generate data
#Generate data part changes a little
n=100
p=100
X<-matrix(rnorm(p*n),ncol=p)
beta<-rep(NA,p)
beta[1:8]<-c(3,1.5,0,0,2,0,0,0)
for(j in 9:p)
{
beta[j]<-rnorm(1)
}
epsilon<-matrix(rnorm(100,0,3),ncol=1)
y<-X%*%beta+epsilon
#Centerize the data
mm<-apply(X,2,mean)
trainx<-as.matrix(sweep(X,2,mm))
yc<-y-mean(y)
mod3 <- lm.ridge(yc ~ trainx, lambda=seq(0,5e-1,1e-8))
Lambda<-mod3$lambda[mod3$GCV==min(mod3$GCV)]   # Minimum GCV criteria
mod33<-lm.ridge(yc ~ trainx, lambda=Lambda)
fitted.vals <- X %*% matrix(mod33$coef,ncol=1)
MSE_COEF[i]<-sum((mod33$coef-beta)^2)
MSE_FITT[i]<-sum((fitted.vals-y)^2)/n
}
debugSource('~/Downloads/Final Project.R')
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_COEF)
mean(MSE_COEF)
MSE_COEF<-rep(NA,100) # can not compare with the originial coefficients since we use combinations of X as new preditors
MSE_FITT<-rep(NA,100)
for(i in 1:100)
{
#Generate data
#Generate data part changes a little
n=100
p=100
X<-matrix(rnorm(p*n),ncol=p)
beta<-rep(NA,p)
beta[1:8]<-c(3,1.5,0,0,2,0,0,0)
for(j in 9:p)
{
beta[j]<-rnorm(1)
}
epsilon<-matrix(rnorm(100,0,3),ncol=1)
y<-X%*%beta+epsilon
pc<-prcomp(X)
eig.val<-(pc$sdev)^2
prop<-cumsum(eig.val/sum(eig.val))
ncomp<-which(prop>=0.9)[1]
mod2<-pcr(y~X,ncomp)
MSE_FITT[i]<-sum((fitted(mod2)[,1,1]-y)^2)/n
MSE_COEF[i]<-sum((coef(mod2)[,1,1]-beta)^2)/p
}
plot(MSE_FITT)
plot(MSE_COEF)
MSE_COEF<-rep(NA,100) # can not compare with the originial coefficients since we use combinations of X as new preditors
MSE_FITT<-rep(NA,100)
for(i in 1:100)
{
#Generate data
#Generate data part changes a little
n=100
p=100
X<-matrix(rnorm(p*n),ncol=p)
beta<-rep(NA,p)
beta[1:8]<-c(3,1.5,0,0,2,0,0,0)
for(j in 9:p)
{
beta[j]<-rnorm(1)
}
epsilon<-matrix(rnorm(100,0,3),ncol=1)
y<-X%*%beta+epsilon
pc<-prcomp(X)
eig.val<-(pc$sdev)^2
prop<-cumsum(eig.val/sum(eig.val))
ncomp<-which(prop>=0.9)[1]
mod2<-pcr(y~X,ncomp)
MSE_FITT[i]<-sum((fitted(mod2)[,1,1]-y)^2)/n
MSE_COEF[i]<-sum((coef(mod2)[,1,1]-beta)^2)/p
}
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
mod2
debugSource('~/Downloads/Final Project.R')
MSE_COEF<-rep(NA,100) # can not compare with the originial coefficients since we use combinations of X as new preditors
MSE_FITT<-rep(NA,100)
for(i in 1:100)
{
#Generate data
#Generate data part changes a little
n=100
p=100
X<-matrix(rnorm(p*n),ncol=p)
beta<-rep(NA,p)
beta[1:8]<-c(3,1.5,0,0,2,0,0,0)
for(j in 9:p)
{
beta[j]<-rnorm(1)
}
epsilon<-matrix(rnorm(100,0,3),ncol=1)
y<-X%*%beta+epsilon
pc<-prcomp(X)
eig.val<-(pc$sdev)^2
prop<-cumsum(eig.val/sum(eig.val))
ncomp<-which(prop>=0.9)[1]
mod2<-pcr(y~X,ncomp)
MSE_FITT[i]<-sum((fitted(mod2)[,1,1]-y)^2)/n
MSE_COEF[i]<-sum((coef(mod2)[,1,1]-beta)^2)/p
}
plot(MSE_FITT)
plot(MSE_COEF)
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
MSE_COEF<-rep(NA,100)
MSE_FITT<-rep(NA,100)
for(i in 1:100)
{
#Generate data
#Generate data part changes a little
n=100
p=100
X<-matrix(rnorm(p*n),ncol=p)
beta<-rep(NA,p)
beta[1:8]<-c(3,1.5,0,0,2,0,0,0)
for(j in 9:p)
{
beta[j]<-rnorm(1)
}
epsilon<-matrix(rnorm(100,0,3),ncol=1)
y<-X%*%beta+epsilon
#Centerize the data
mm<-apply(X,2,mean)
trainx<-as.matrix(sweep(X,2,mm))
yc<-y-mean(y)
mod3 <- lm.ridge(yc ~ trainx, lambda=seq(0,5e-8,1e-9))
Lambda<-mod3$lambda[mod3$GCV==min(mod3$GCV)]   # Minimum GCV criteria
mod33<-lm.ridge(yc ~ trainx, lambda=Lambda)
fitted.vals <- X %*% matrix(mod33$coef,ncol=1)
MSE_COEF[i]<-sum((mod33$coef-beta)^2)/p
MSE_FITT[i]<-sum((fitted.vals-y)^2)/n
}
plot(MSE_FITT)
plot(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_COEF)
mean(MSE_COEF)
MSE_COEF<-rep(NA,100)
MSE_FITT<-rep(NA,100)
for(i in 1:100)
{
#Generate data
n=100
p=100
X<-matrix(rnorm(p*n),ncol=p)
beta<-rep(NA,p)
beta[1:8]<-c(3,1.5,0,0,2,0,0,0)
for(j in 9:p)
{
beta[j]<-rnorm(1)
}
epsilon<-matrix(rnorm(100,0,3),ncol=1)
y<-X%*%beta+epsilon
object <- lars(X,y,type="lasso")
fitted.vals<-X%*%coef(object)[object$RSS==min(object$RSS),]
MSE_COEF[i]<- sum((coef(object)[object$RSS==min(object$RSS),]-beta)^2)/p
MSE_FITT[i]<- sum((fitted.vals-y)^2)/n
}
plot(MSE_FITT)
plot(MSE_COEF)
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
MSE_COEF<-rep(NA,100)
MSE_FITT<-rep(NA,100)
for(i in 1:100)
{
#Generate data
#Generate data part changes a little
n=100
p=200
X<-matrix(rnorm(p*n),ncol=p)
beta<-rep(NA,p)
beta[1:8]<-c(3,1.5,0,0,2,0,0,0)
for(j in 9:p)
{
beta[j]<-rnorm(1)
}
epsilon<-matrix(rnorm(100,0,3),ncol=1)
y<-X%*%beta+epsilon
#Forward stepwise selection
mod1<-lm(y~X)
mod11<-step(mod1,direction="forward")
DIFF1<-mod11$coefficients-c(1,beta)
MSE_COEF[i]<-sum(DIFF1^2)
fitted.vals<-mod11$fitted
DIFF2<-fitted.vals-y
MSE_FITT[i]<-sum(DIFF2^2)/n
}
plot(MSE_COEF)
plot(MSE_FITT)
MSE_COEF<-rep(NA,100) # can not compare with the originial coefficients since we use combinations of X as new preditors
MSE_FITT<-rep(NA,100)
for(i in 1:100)
{
#Generate data
#Generate data part changes a little
n=100
p=200
X<-matrix(rnorm(p*n),ncol=p)
beta<-rep(NA,p)
beta[1:8]<-c(3,1.5,0,0,2,0,0,0)
for(j in 9:p)
{
beta[j]<-rnorm(1)
}
epsilon<-matrix(rnorm(100,0,3),ncol=1)
y<-X%*%beta+epsilon
pc<-prcomp(X)
eig.val<-(pc$sdev)^2
prop<-cumsum(eig.val/sum(eig.val))
ncomp<-which(prop>=0.9)[1]
mod2<-pcr(y~X,ncomp)
MSE_FITT[i]<-sum((fitted(mod2)[,1,1]-y)^2)/n
MSE_COEF[i]<-sum((coef(mod2)[,1,1]-beta)^2)/p
}
plot(MSE_FITT)
plot(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_COEF)
mean(MSE_COEF)
MSE_COEF<-rep(NA,100)
MSE_FITT<-rep(NA,100)
for(i in 1:100)
{
#Generate data
#Generate data part changes a little
n=100
p=200
X<-matrix(rnorm(p*n),ncol=p)
beta<-rep(NA,p)
beta[1:8]<-c(3,1.5,0,0,2,0,0,0)
for(j in 9:p)
{
beta[j]<-rnorm(1)
}
epsilon<-matrix(rnorm(100,0,3),ncol=1)
y<-X%*%beta+epsilon
#Centerize the data
mm<-apply(X,2,mean)
trainx<-as.matrix(sweep(X,2,mm))
yc<-y-mean(y)
mod3 <- lm.ridge(yc ~ trainx, lambda=seq(0,5e-8,1e-9))
Lambda<-mod3$lambda[mod3$GCV==min(mod3$GCV)]   # Minimum GCV criteria
mod33<-lm.ridge(yc ~ trainx, lambda=Lambda)
fitted.vals <- X %*% matrix(mod33$coef,ncol=1)
MSE_COEF[i]<-sum((mod33$coef-beta)^2)/p
MSE_FITT[i]<-sum((fitted.vals-y)^2)/n
}
plot(MSE_FITT)
plot(MSE_COEF)
var(MSE_COEF)
mean(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
MSE_COEF<-rep(NA,100)
MSE_FITT<-rep(NA,100)
for(i in 1:100)
{
#Generate data
n=100
p=200
X<-matrix(rnorm(p*n),ncol=p)
beta<-rep(NA,p)
beta[1:8]<-c(3,1.5,0,0,2,0,0,0)
for(j in 9:p)
{
beta[j]<-rnorm(1)
}
epsilon<-matrix(rnorm(100,0,3),ncol=1)
y<-X%*%beta+epsilon
object <- lars(X,y,type="lasso")
fitted.vals<-X%*%coef(object)[object$RSS==min(object$RSS),]
MSE_COEF[i]<- sum((coef(object)[object$RSS==min(object$RSS),]-beta)^2)/p
MSE_FITT[i]<- sum((fitted.vals-y)^2)/n
}
plot(MSE_FITT)
plot(MSE_COEF)
var(MSE_FITT)
mean(MSE_FITT)
var(MSE_COEF)
mean(MSE_COEF)
install.packages("knitr")
source('~/Desktop/2_3c.R')
